import os
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ —Ü–∏—Ç–∞—Ç–∏
quotes = [
    "–°—å–æ–≥–æ–¥–Ω—ñ ‚Äî —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –ø–æ—á–∞—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ.",
    "–ù–∞–≤—ñ—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π –∫—Ä–æ–∫ ‚Äî —Ü–µ –ø—Ä–æ–≥—Ä–µ—Å.",
    "–£—Å–ø—ñ—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–æ —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –∑–¥–∞—î—Ç—å—Å—è.",
    "–¢–≤–æ—è –µ–Ω–µ—Ä–≥—ñ—è ‚Äî —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞!",
    "–¢–∏ –º–æ–∂–µ—à –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –¥—É–º–∞—î—à."
]

# –ß–µ–ª–µ–Ω–¥–∂—ñ
challenges = [
    "üíß –í–∏–ø–∏–π 2 –ª –≤–æ–¥–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.",
    "üö∂ –ü—Ä–æ–π–¥–∏ 8000 –∫—Ä–æ–∫—ñ–≤.",
    "üìµ –í–∏–º–∫–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ 1 –≥–æ–¥–∏–Ω—É.",
    "üìö –ü–æ—á–∏—Ç–∞–π 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–Ω–∏–≥–∏.",
    "üßò‚Äç‚ôÄÔ∏è –ó—Ä–æ–±–∏ 5 —Ö–≤–∏–ª–∏–Ω –º–µ–¥–∏—Ç–∞—Ü—ñ—ó –∞–±–æ –¥–∏—Ö–∞–Ω–Ω—è."
]

# –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è
ua_days = {
    "Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "Tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫", "Wednesday": "–°–µ—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä", "Friday": "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "Saturday": "–°—É–±–æ—Ç–∞", "Sunday": "–ù–µ–¥—ñ–ª—è"
}

# –†–æ–±–æ—á–∏–π –≥—Ä–∞—Ñ—ñ–∫
def get_work_schedule():
    today = datetime.now()
    date_limit = datetime(today.year, 4, 21)
    dow = ua_days[today.strftime("%A")]
    if today < date_limit and dow in ["–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]:
        return "–ù—ñ—á–Ω–∞ –∑–º—ñ–Ω–∞ 20:00‚Äì08:00"
    else:
        return "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π –∞–±–æ –∑–º—ñ–Ω–∞ —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞"

# –ê–≤—Ç–æ–±—É—Å
def get_bus_time():
    return "üöç –ê–≤—Ç–æ–±—É—Å:\n1-–∞ –∑–º—ñ–Ω–∞: 04:35\n2-–∞ –∑–º—ñ–Ω–∞: 16:38"

# –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è
def get_shift():
    today = datetime.now().date()
    if datetime(2025, 4, 28).date() <= today <= datetime(2025, 5, 4).date():
        return "üë©‚Äç‚öïÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–≥—É—î: –û–∫—Å–∞–Ω–∞"
    elif datetime(2025, 5, 5).date() <= today <= datetime(2025, 5, 12).date():
        return "üë©‚Äç‚öïÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–≥—É—î: –ú–∞—Ä—ñ—è"
    elif datetime(2025, 5, 13).date() <= today <= datetime(2025, 5, 20).date():
        return "üë©‚Äç‚öïÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–≥—É—î: –î—ñ–∞–Ω–∞"
    else:
        return "–ß–µ—Ä–≥—É–≤–∞–Ω—å –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"

# –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
main_menu = ReplyKeyboardMarkup(
    [
        ["üïí –†–æ–±–æ—Ç–∞", "üöç –ê–≤—Ç–æ–±—É—Å"],
        ["üë©‚Äç‚öïÔ∏è –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è", "üí¨ –¶–∏—Ç–∞—Ç–∞"],
        ["üí™ –ß–µ–ª–µ–Ω–¥–∂"]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá",
        reply_markup=main_menu
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑ –ø–æ—Å—Ç—ñ–π–Ω–∏–º –º–µ–Ω—é
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üïí –†–æ–±–æ—Ç–∞":
        day = ua_days[datetime.now().strftime("%A")]
        await update.message.reply_text(f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {day}\nüïí {get_work_schedule()}")
    elif text == "üöç –ê–≤—Ç–æ–±—É—Å":
        await update.message.reply_text(get_bus_time())
    elif text == "üë©‚Äç‚öïÔ∏è –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è":
        await update.message.reply_text(get_shift())
    elif text == "üí¨ –¶–∏—Ç–∞—Ç–∞":
        await update.message.reply_text(random.choice(quotes))
    elif text == "üí™ –ß–µ–ª–µ–Ω–¥–∂":
        await update.message.reply_text(random.choice(challenges))
    else:
        await update.message.reply_text("–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ üßê –û–±–µ—Ä–∏ —â–æ—Å—å —ñ–∑ –º–µ–Ω—é.")


    await update.message.reply_text(response, reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(os.environ['7938270207:AAHUYWrqzNBv5DuoY6KsfJ7vDBF2GJ4dRjA']).build()
app.add_handler(CommandHandler('start', start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
